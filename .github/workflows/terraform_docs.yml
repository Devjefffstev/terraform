name: Terraform Docs

on:
    workflow_dispatch:
        inputs:
            log-level:
                description: 'Log level (trace, debug, info, warn, error, fatal, panic)'
                required: false
                default: 'info'
                type: string  
            terraform-test-verbose:
                description: 'Terraform test verbose mode (true, false)'
                required: false
                default: false
                type: boolean
                
    # push:
    #     branches:
    #         - main
    #     paths:
    #         - modules/**
    pull_request:
        branches:
            - main

env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  PATH_PREFIX: modules

permissions:
  pull-requests: write
  contents: write

jobs:

  get-commit-info:
    name: Get commit information
    runs-on: ubuntu-latest
    outputs:
      commit-message: ${{ steps.commit-info.outputs.message }}
      commit-author: ${{ steps.commit-info.outputs.author }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.head_ref }}
      - name: Get commit info
        id: commit-info
        run: |
          # Get the actual commit message from the PR branch, not the merge commit
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            # Get the last non-merge commit from the PR
            COMMIT_MESSAGE=$(git log --no-merges -1 --pretty=format:'%s' origin/${{ github.head_ref }})
            COMMIT_AUTHOR=$(git log --no-merges -1 --pretty=format:'%an' origin/${{ github.head_ref }})
          else
            COMMIT_MESSAGE=$(git log -1 --pretty=format:'%s')
            COMMIT_AUTHOR=$(git log -1 --pretty=format:'%an')
          fi
          echo "message=$COMMIT_MESSAGE" >> $GITHUB_OUTPUT
          echo "author=$COMMIT_AUTHOR" >> $GITHUB_OUTPUT
          echo "Commit message: $COMMIT_MESSAGE"
          echo "Commit author: $COMMIT_AUTHOR"

  find-changes:
    name: Find in modules folder
    runs-on: ubuntu-latest
    needs: get-commit-info    
    outputs:
      changed-modules: ${{ steps.changed-modules.outputs.result }}
      commit-message: ${{ needs.get-commit-info.outputs.commit-message }}      
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 2
      - name: Get changed files
        id: changed-files
        uses: tj-actions/changed-files@v39
        with:
          files_ignore: '.github/workflows/**'
      - name: Get changed modules
        id: changed-modules
        uses: actions/github-script@v6.4.1
        with:
          script: |
            const prefix_path = process.env.PATH_PREFIX;
            const paths = "${{ steps.changed-files.outputs.all_modified_files }}";
            const regex = /modules\/([^/]+\/[^/]+)/g;
            const matches = paths.match(regex);
            
            console.log(`prefix_path: ${prefix_path}`);
            console.log(`regex: ${regex}`);
            console.log(`Paths: ${paths}`);
            console.log(`Found matches: ${matches}`);
            
            if (!matches) {
              return [];
            }
            // Extract the module names from the matches
            const moduleNames = matches.map(match => {
              return match; // Extract the entire match
            });
            // Remove duplicates and return the unique module names
            const uniqueModuleNames = Array.from(new Set(moduleNames));
            console.log(uniqueModuleNames);
            return uniqueModuleNames;

  validate-output:
    runs-on: ubuntu-latest
    needs: find-changes
    steps:
     - run: |
         echo "Changed modules: ${{ needs.find-changes.outputs.changed-modules }}"
         echo "Commit message: ${{ needs.find-changes.outputs.commit-message }}"
     - run: |
         echo "Changed modules: ${{ needs.find-changes.outputs.changed-modules }}"
         echo "Commit message: ${{ needs.find-changes.outputs.commit-message }}"


  update-readme:
    name: Update README for changed modules
    runs-on: ubuntu-latest
    if: needs.find-changes.outputs.changed-modules != '[]' && github.event_name == 'pull_request' && github.base_ref == 'main'
    needs: find-changes
    strategy:
      matrix:
        module: ${{ fromJson(needs.find-changes.outputs.changed-modules) }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          ref: ${{ github.head_ref }}
          fetch-depth: 0
      - name: Render terraform docs and push changes back to PR
        uses: terraform-docs/gh-actions@v1
        with:
          working-dir: ${{ matrix.module }}
          output-file: README.md
          output-method: inject
          git-push: "true"
          git-commit-message: ${{ needs.find-changes.outputs.commit-message }}

  module-review:
    name: Individual module review
    runs-on: ubuntu-latest
    environment: general    
    env:
        TF_VAR_subscription_id: ${{ vars.AZURE_SUBSCRIPTION_ID }}  
        TF_VAR_client_id: ${{ vars.AZURE_CLIENT_ID }}
        TF_VAR_client_secret: ${{ secrets.AZURE_CLIENT_SECRET }}
        TF_VAR_tenant_id: ${{ vars.AZURE_TENANT_ID }}
    if: needs.find-changes.outputs.changed-modules != '[]'
    needs: find-changes
    strategy:
      matrix: 
        module: ${{ fromJson(needs.find-changes.outputs.changed-modules) }}
    defaults:
      run:
        working-directory: ${{ matrix.module }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
      - name: Check Pre-installed Terraform
        run: terraform --version
      - run: terraform init
      - run: terraform fmt -diff -check
      - run: terraform validate
      - run: terraform test 
      - name: Terraform Test with Verbose Logging
        run: terraform test -verbose
        if: ${{ github.event.inputs.terraform-test-verbose == 'true' }}
        
      